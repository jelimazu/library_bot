from sqlite3 import Row
from typing import Iterable

from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup
from aiogram import types

import data.database.db as db
from units import navigation_buttons, list_page


async def main_keyboard() -> ReplyKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏

    Returns:
        ReplyKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    """

    buttons = [
        [
            types.KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É"),
        ],
        [
            types.KeyboardButton(text="üìö –í—Å–µ –∫–Ω–∏–≥–∏"),
            types.KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É"),
        ],
    ]
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)
    return keyboard


async def show_books_keyboard(books: Iterable[Row] | None, callback_data: str, page: int = 0) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–∏–≥–∞–º–∏

    Args:
        books (Iterable[Row]): —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
        callback_data (str): callback_data –¥–ª—è –∫–Ω–æ–ø–æ–∫
        page (int, optional): —Å—Ç—Ä–∞–Ω–∏—Ü–∞. Defaults to 0.

    Returns:
        InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–∏–≥–∞–º–∏
    """

    buttons = []
    if books:
        page_items, has_next_page = list_page.get_page_from_list(books, page)
        for book in page_items:
            buttons.append([types.InlineKeyboardButton(text=f"{book[1]} | {book[2]}", callback_data=f"open_book:{book[0]}")])
        navigation_buttons_ = navigation_buttons.get_navigation_buttons(page, has_next_page, callback_data)
        buttons.append(navigation_buttons_)
    else:
        buttons.append([types.InlineKeyboardButton(text="üò¢ –ö–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", callback_data="nothing")])
    buttons.append([types.InlineKeyboardButton(text="‚ùå", callback_data="close")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


async def edit_book_keyboard(book_id: int) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏

    Args:
        book_id (int): id –∫–Ω–∏–≥–∏

    Returns:
        InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
    """

    buttons = [
        [
            types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"delete_book:{book_id}"),
        ],
        [
            types.InlineKeyboardButton(text="‚ùå", callback_data="close")
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


async def genres_keyboard() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏

    Returns:
        InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∂–∞–Ω—Ä–∞–º–∏
    """

    buttons = []
    genres = await db.get_all_genres()
    for genre in genres:
        buttons.append([types.InlineKeyboardButton(text=f"{genre[1]}", callback_data=f"choose_genre:{genre[0]}")])
    buttons.append([types.InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∂–∞–Ω—Ä", callback_data="add_genre")])
    buttons.append([types.InlineKeyboardButton(text="‚ùå", callback_data="cancel")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


async def authors_keyboard() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤—Ç–æ—Ä–∞–º–∏

    Returns:
        InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∞–≤—Ç–æ—Ä–∞–º–∏
    """

    buttons = []
    authors = await db.get_all_authors()
    for author in authors:
        buttons.append([types.InlineKeyboardButton(text=f"{author[1]}", callback_data=f"choose_author:{author[0]}")])
    buttons.append([types.InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data="add_author")])
    buttons.append([types.InlineKeyboardButton(text="‚ùå", callback_data="cancel")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


async def choose_search_type_keyboard() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞

    Returns:
        InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
    """

    buttons = [
        [
            types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–∞–≤—Ç–æ—Ä—É", callback_data="search_by_name"),
        ],
        [
            types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É", callback_data="search_by_genre"),
        ],
        [
            types.InlineKeyboardButton(text="‚ùå", callback_data="close")
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


async def search_by_genre_keyboard(page: int = 0) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞

    Args:
        page (int, optional): —Å—Ç—Ä–∞–Ω–∏—Ü–∞. Defaults to 0.

    Returns:
        InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∂–∞–Ω—Ä–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    """

    buttons = []
    genres = await db.get_all_genres()
    for genre in genres:
        buttons.append([types.InlineKeyboardButton(text=f"{genre[1]}", callback_data=f"get_books_by_genre:{genre[0]}:{page}")])
    buttons.append([types.InlineKeyboardButton(text="‚ùå", callback_data="close")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


async def cancel_keyboard() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è

    Returns:
        InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
    """

    buttons = [
        [
            types.InlineKeyboardButton(text="‚ùå", callback_data="cancel")
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


async def close_keyboard() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é

    Returns:
        InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
    """

    buttons = [
        [
            types.InlineKeyboardButton(text="‚ùå", callback_data="close")
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard